# -*- coding: utf-8 -*-
"""Impementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iQ75niTq1oTNh3JTCI6vCKlKSbf7QMzO
"""

import hashlib
import json
from flask import Flask, jsonify, request

# Section B: Implementation of Blockchain Technology
class Blockchain:
    def __init__(self, hashing_algorithm="SHA-512"):
        """
        Initializes the blockchain with an empty chain and pending certificates.
        Allows selecting a hashing algorithm for the blockchain.
        """
        self.chain = []  # List to store all blocks in the chain
        self.pending_certificates = []  # List to store certificates waiting to be added to a block
        self.hashing_algorithm = hashing_algorithm  # Hashing algorithm for the blockchain
        self.create_block(previous_hash="0")  # Create the genesis block

    def create_block(self, previous_hash):
        """
        Creates a new block and adds it to the blockchain.
        :param previous_hash: The hash of the previous block
        """
        block = {
            'index': len(self.chain) + 1,  # Block number
            'certificates': self.pending_certificates,  # Certificates to include in this block
            'previous_hash': previous_hash,  # Hash of the previous block
        }
        block['hash'] = self.hash_block(block)  # Compute the block's hash
        self.pending_certificates = []  # Reset the pending certificates
        self.chain.append(block)  # Add the block to the chain
        return block

    def hash_block(self, block):
        """
        Computes the hash of a block using the selected hashing algorithm.
        :param block: The block to hash
        """
        encoded_block = json.dumps(block, sort_keys=True).encode()  # Serialize block for hashing
        if self.hashing_algorithm == "SHA-512":
            return hashlib.sha512(encoded_block).hexdigest()
        elif self.hashing_algorithm == "SHA3-512":
            return hashlib.sha3_512(encoded_block).hexdigest()
        elif self.hashing_algorithm == "Blake2b":
            return hashlib.blake2b(encoded_block).hexdigest()
        else:
            raise ValueError("Unsupported hashing algorithm")  # Error for unsupported algorithms

    def add_certificate(self, certificate):
        """
        Adds a certificate to the list of pending certificates.
        :param certificate: The certificate to add
        """
        self.pending_certificates.append(certificate)

    def is_chain_valid(self):
        """
        Validates the blockchain to ensure that each block's hash matches
        and that the chain is correctly linked.
        """
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]
            # Check if the hash of the current block matches its calculated hash
            if current_block['hash'] != self.hash_block(current_block):
                return False
            # Check if the previous_hash in the current block matches the previous block's hash
            if current_block['previous_hash'] != previous_block['hash']:
                return False
        return True

# Section A: Interface of Application
app = Flask(__name__)  # Create a Flask app instance
blockchain = Blockchain(hashing_algorithm="SHA3-512")  # Initialize blockchain with desired hashing algorithm

@app.route('/add_certificate', methods=['POST'])
def add_certificate():
    """
    Endpoint to add a certificate to the pending certificates list.
    Expects JSON data with 'name', 'certificate_id', and 'details' fields.
    """
    data = request.get_json()  # Get JSON payload from the request
    certificate = {
        'name': data['name'],  # Certificate owner's name
        'certificate_id': data['certificate_id'],  # Unique ID for the certificate
        'details': data['details']  # Additional certificate details
    }
    blockchain.add_certificate(certificate)  # Add the certificate to pending list
    return jsonify({'message': 'Certificate added successfully'}), 201  # Return success response

@app.route('/mine_block', methods=['GET'])
def mine_block():
    """
    Endpoint to mine a block. Moves pending certificates into a new block.
    """
    if not blockchain.pending_certificates:
        # Return error if no certificates are pending
        return jsonify({'message': 'No certificates to mine'}), 400
    # Create a new block and add it to the blockchain
    block = blockchain.create_block(blockchain.chain[-1]['hash'])
    return jsonify({'message': 'Block mined successfully', 'block': block}), 200  # Return the new block

@app.route('/get_chain', methods=['GET'])
def get_chain():
    """
    Endpoint to retrieve the entire blockchain and its length.
    """
    return jsonify({'chain': blockchain.chain, 'length': len(blockchain.chain)}), 200  # Return the chain and its length

@app.route('/validate_chain', methods=['GET'])
def validate_chain():
    """
    Endpoint to validate the blockchain.
    """
    is_valid = blockchain.is_chain_valid()  # Check the validity of the chain
    # Return a message indicating whether the chain is valid
    return jsonify({'message': 'Blockchain is valid' if is_valid else 'Blockchain is invalid'}), 200

# Run the Flask app
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)  # Run on all network interfaces, port 5000, in debug mode
    #Use curl to display the output if page doesn't load

!git config --global user.name "DevThakkar18"
!git config --global user.email "devjayeshbhai.thakkar@ontariotechu.net"
!git init
!git add .
!git commit -m "Initial commit from Colab"
!git remote add origin https://github.com/DevThakkar18/Colabcode.git
!git push -u origin main